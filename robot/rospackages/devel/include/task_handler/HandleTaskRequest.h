// Generated by gencpp from file task_handler/HandleTaskRequest.msg
// DO NOT EDIT!


#ifndef TASK_HANDLER_MESSAGE_HANDLETASKREQUEST_H
#define TASK_HANDLER_MESSAGE_HANDLETASKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task_handler
{
template <class ContainerAllocator>
struct HandleTaskRequest_
{
  typedef HandleTaskRequest_<ContainerAllocator> Type;

  HandleTaskRequest_()
    : task()
    , status(0)
    , args()  {
    }
  HandleTaskRequest_(const ContainerAllocator& _alloc)
    : task(_alloc)
    , status(0)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_type;
  _task_type task;

   typedef int64_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _args_type;
  _args_type args;





  typedef boost::shared_ptr< ::task_handler::HandleTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_handler::HandleTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HandleTaskRequest_

typedef ::task_handler::HandleTaskRequest_<std::allocator<void> > HandleTaskRequest;

typedef boost::shared_ptr< ::task_handler::HandleTaskRequest > HandleTaskRequestPtr;
typedef boost::shared_ptr< ::task_handler::HandleTaskRequest const> HandleTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_handler::HandleTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_handler::HandleTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace task_handler

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': False, 'IsFixedSize': False, 'IsMessage': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_handler::HandleTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_handler::HandleTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_handler::HandleTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c3bfa3c5ece06ca41e18f32980823de";
  }

  static const char* value(const ::task_handler::HandleTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c3bfa3c5ece06caULL;
  static const uint64_t static_value2 = 0x41e18f32980823deULL;
};

template<class ContainerAllocator>
struct DataType< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_handler/HandleTaskRequest";
  }

  static const char* value(const ::task_handler::HandleTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string task\n\
int64 status\n\
string args\n\
";
  }

  static const char* value(const ::task_handler::HandleTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.status);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandleTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_handler::HandleTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_handler::HandleTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task);
    s << indent << "status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.status);
    s << indent << "args: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_HANDLER_MESSAGE_HANDLETASKREQUEST_H
