// Generated by gencpp from file mcu_control/AntennaGoal.msg
// DO NOT EDIT!


#ifndef MCU_CONTROL_MESSAGE_ANTENNAGOAL_H
#define MCU_CONTROL_MESSAGE_ANTENNAGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcu_control
{
template <class ContainerAllocator>
struct AntennaGoal_
{
  typedef AntennaGoal_<ContainerAllocator> Type;

  AntennaGoal_()
    : desiredDir(0.0)
    , distFromBase(0.0)  {
    }
  AntennaGoal_(const ContainerAllocator& _alloc)
    : desiredDir(0.0)
    , distFromBase(0.0)  {
  (void)_alloc;
    }



   typedef double _desiredDir_type;
  _desiredDir_type desiredDir;

   typedef double _distFromBase_type;
  _distFromBase_type distFromBase;





  typedef boost::shared_ptr< ::mcu_control::AntennaGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcu_control::AntennaGoal_<ContainerAllocator> const> ConstPtr;

}; // struct AntennaGoal_

typedef ::mcu_control::AntennaGoal_<std::allocator<void> > AntennaGoal;

typedef boost::shared_ptr< ::mcu_control::AntennaGoal > AntennaGoalPtr;
typedef boost::shared_ptr< ::mcu_control::AntennaGoal const> AntennaGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcu_control::AntennaGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcu_control::AntennaGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcu_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': False, 'IsMessage': True, 'IsFixedSize': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'mcu_control': ['/home/vashmata/Programming/git/robotics-prototype/robot/rospackages/src/mcu_control/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::mcu_control::AntennaGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcu_control::AntennaGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcu_control::AntennaGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcu_control::AntennaGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcu_control::AntennaGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcu_control::AntennaGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcu_control::AntennaGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e3ff4c1f14859f1d5d7315b6ab697b9";
  }

  static const char* value(const ::mcu_control::AntennaGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e3ff4c1f14859f1ULL;
  static const uint64_t static_value2 = 0xd5d7315b6ab697b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcu_control::AntennaGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcu_control/AntennaGoal";
  }

  static const char* value(const ::mcu_control::AntennaGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcu_control::AntennaGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 desiredDir\n\
float64 distFromBase\n\
";
  }

  static const char* value(const ::mcu_control::AntennaGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcu_control::AntennaGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desiredDir);
      stream.next(m.distFromBase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AntennaGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcu_control::AntennaGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcu_control::AntennaGoal_<ContainerAllocator>& v)
  {
    s << indent << "desiredDir: ";
    Printer<double>::stream(s, indent + "  ", v.desiredDir);
    s << indent << "distFromBase: ";
    Printer<double>::stream(s, indent + "  ", v.distFromBase);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCU_CONTROL_MESSAGE_ANTENNAGOAL_H
