// Generated by gencpp from file arm_control/RoverGoal.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_ROVERGOAL_H
#define ARM_CONTROL_MESSAGE_ROVERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_control
{
template <class ContainerAllocator>
struct RoverGoal_
{
  typedef RoverGoal_<ContainerAllocator> Type;

  RoverGoal_()
    : desiredDir(0.0)
    , distToGoal(0.0)  {
    }
  RoverGoal_(const ContainerAllocator& _alloc)
    : desiredDir(0.0)
    , distToGoal(0.0)  {
  (void)_alloc;
    }



   typedef double _desiredDir_type;
  _desiredDir_type desiredDir;

   typedef double _distToGoal_type;
  _distToGoal_type distToGoal;





  typedef boost::shared_ptr< ::arm_control::RoverGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::RoverGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RoverGoal_

typedef ::arm_control::RoverGoal_<std::allocator<void> > RoverGoal;

typedef boost::shared_ptr< ::arm_control::RoverGoal > RoverGoalPtr;
typedef boost::shared_ptr< ::arm_control::RoverGoal const> RoverGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::RoverGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::RoverGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arm_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'HasHeader': False, 'IsMessage': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'arm_control': ['/home/vashmata/Programming/git/robotics-prototype/robot/rospackages/src/arm_control/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::RoverGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::RoverGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::RoverGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::RoverGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::RoverGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::RoverGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::RoverGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4aa12af78877a5824d18dc450fa46f2d";
  }

  static const char* value(const ::arm_control::RoverGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4aa12af78877a582ULL;
  static const uint64_t static_value2 = 0x4d18dc450fa46f2dULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::RoverGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/RoverGoal";
  }

  static const char* value(const ::arm_control::RoverGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::RoverGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 desiredDir\n\
float64 distToGoal\n\
";
  }

  static const char* value(const ::arm_control::RoverGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::RoverGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desiredDir);
      stream.next(m.distToGoal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoverGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::RoverGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::RoverGoal_<ContainerAllocator>& v)
  {
    s << indent << "desiredDir: ";
    Printer<double>::stream(s, indent + "  ", v.desiredDir);
    s << indent << "distToGoal: ";
    Printer<double>::stream(s, indent + "  ", v.distToGoal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_ROVERGOAL_H
