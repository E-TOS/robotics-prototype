file(MAKE_DIRECTORY build)
set(CMAKE_BINARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/build")

cmake_minimum_required(VERSION 3.17.0)
project(@Project_Name@)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


file(GLOB ${PROJECT_NAME}_user_sources ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp) 

set(PROJECT_SUBDIRECTORIES "")

getIncludeDirectories(PROJECT_SUBDIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR})


if(NOT ${${PROJECT_NAME}_user_sources} STREQUAL "")
add_library(${PROJECT_NAME}_user ${${PROJECT_NAME}_user_sources})
target_include_directories(${PROJECT_NAME}_user PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_options(${PROJECT_NAME}_user PUBLIC ${ARM_GXX_FLAGS})	
endif()


configure_file(${PROJECT_NAME}.ino ${PROJECT_NAME}.ino.cpp)



add_executable(${PROJECT_NAME} ${PROJECT_NAME}.ino.cpp)
target_compile_options(${PROJECT_NAME} PUBLIC ${ARM_GXX_FLAGS})
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_include_directories(${PROJECT_NAME} PRIVATE ${PROJECT_SUBDIRECTORIES})
target_include_directories(${PROJECT_NAME} PRIVATE ${EXTERNAL_LIBARRIES_INCLUDE_DIRS})


set_target_properties(
${PROJECT_NAME} PROPERTIES 
LINKER_LANGUAGE C 
LINK_FLAGS ${ARM_GCC_LINKER_FLAGS} 
OUTPUT_NAME ${PROJECT_NAME}.elf
)

target_link_libraries(
${PROJECT_NAME} 
${EXTERNAL_LIBRARIES}
$<$<BOOL:${${PROJECT_NAME}_user_sources}>:${PROJECT_NAME}_user> 
teensycore
-lm
) 
